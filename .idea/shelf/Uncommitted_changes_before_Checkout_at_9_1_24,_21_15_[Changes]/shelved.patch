Index: app/src/main/java/com/example/pizzeria/components/scaffold/ModalDrawerSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.pizzeria.components.scaffold\n\nimport android.content.Context\nimport android.content.res.Configuration\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material3.DrawerState\nimport androidx.compose.material3.ExperimentalMaterial3Api\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.ModalDrawerSheet\nimport androidx.compose.material3.NavigationDrawerItem\nimport androidx.compose.material3.NavigationDrawerItemDefaults\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.unit.dp\nimport androidx.navigation.NavController\nimport com.example.pizzeria.R\nimport com.example.pizzeria.models.data.getNavDrawInfo\nimport com.example.pizzeria.models.viewmodels.UserViewModel\nimport com.example.pizzeria.ui.theme.FontCWGSans\nimport com.example.pizzeria.ui.theme.Palette_1_11\nimport com.example.pizzeria.ui.theme.Palette_1_7\nimport com.example.pizzeria.ui.theme.scaffold\nimport com.example.pizzeria.ui.theme.tostadito\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.launch\n\n@OptIn(ExperimentalMaterial3Api::class)\n@Composable\nfun MyModalDrawerSheet(scope: CoroutineScope, drawerState: DrawerState, navController: NavController, currentRoute: String?, userViewModel: UserViewModel, configuration: Configuration, context: Context) {\n    val items = getNavDrawInfo(context)\n    ModalDrawerSheet(\n        drawerContainerColor = tostadito,\n        drawerTonalElevation = 2.dp,\n        modifier = Modifier\n            //Ajustar el ModalDrawer para cada tipo de orientaciÃ³n\n            .fillMaxWidth(if (configuration.orientation != Configuration.ORIENTATION_LANDSCAPE) 0.5f else 0.25f)\n            .padding(end = if (configuration.orientation != Configuration.ORIENTATION_LANDSCAPE) 0.dp else 70.dp),\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .verticalScroll(rememberScrollState()),\n            horizontalAlignment = Alignment.CenterHorizontally,\n            verticalArrangement = Arrangement.Center\n        ) {\n            if (configuration.orientation != Configuration.ORIENTATION_LANDSCAPE) {\n                Column(\n                    modifier = Modifier.weight(0.25f),\n                    verticalArrangement = Arrangement.Center\n                ) {\n                    Spacer(modifier = Modifier.height(20.dp))\n                    Image(\n                        painter = painterResource(R.drawable.pizzalogo),\n                        contentDescription = \"Logo\"\n                    )\n                }\n            }\n            Column(\n                modifier = Modifier.weight(if (configuration.orientation != Configuration.ORIENTATION_LANDSCAPE) 0.85f else 1f),\n                verticalArrangement = Arrangement.Center\n            ) {\n                items.forEach { item ->\n                    if (configuration.orientation != Configuration.ORIENTATION_LANDSCAPE) {\n                        NavigationDrawerItem(\n                            label = {\n                                Text(\n                                    text =\n                                    if (configuration.orientation != Configuration.ORIENTATION_LANDSCAPE) {\n                                        if (item.name == \"Login\") {\n                                            if (userViewModel.auth.currentUser == null) context.getString(R.string.log_in) else context.getString(R.string.log_out)\n                                        } else {\n                                            item.name\n                                        }\n                                    } else \"\",\n                                    fontFamily = FontCWGSans,\n                                    color = if (item.url == currentRoute) Color.White else Palette_1_11\n\n                                )\n                            },\n                            icon = {\n                                Icon(\n                                    painter = painterResource(item.icon),\n                                    contentDescription = item.name,\n                                    modifier = Modifier.size(30.dp),\n                                    tint = if (item.url == currentRoute) Color.White else Palette_1_11\n                                )\n                                Spacer(modifier = Modifier.width(10.dp))\n                            },\n                            selected = item.url == currentRoute,\n                            onClick = {\n                                if (item.name == \"Login\") {\n                                    if (userViewModel.auth.currentUser != null) {\n                                        userViewModel.auth.signOut()\n                                    }\n                                }\n                                scope.launch { drawerState.apply { drawerState.close() } }\n                                navController.navigate(item.url)\n                            },\n                            colors = NavigationDrawerItemDefaults.colors(\n                                unselectedContainerColor = Color.Transparent,\n                                selectedTextColor = Color.White,\n                                selectedIconColor = Color.White,\n                                selectedContainerColor = Palette_1_7\n                            )\n\n                        )\n                    } else {\n                        if (item.name != \"Menu\") {\n                            NavigationDrawerItem(\n                                label = {\n                                    Text(text = \"\")\n                                },\n                                icon = {\n                                    Row(\n                                        modifier = Modifier.fillMaxWidth(),\n                                        horizontalArrangement = Arrangement.Center\n                                    ) {\n                                        Icon(\n                                            painter = painterResource(item.icon),\n                                            contentDescription = item.name,\n                                            modifier = Modifier.size(30.dp),\n                                            tint = scaffold\n                                        )\n                                    }\n                                },\n                                selected = item.url == currentRoute,\n                                onClick = {\n                                    if (item.name == \"Login\") {\n                                        if (userViewModel.auth.currentUser != null) {\n                                            userViewModel.auth.signOut()\n                                        }\n                                    }\n                                    scope.launch { drawerState.apply { drawerState.close() } }\n                                    navController.navigate(item.url)\n                                },\n                                colors = NavigationDrawerItemDefaults.colors(\n                                    unselectedContainerColor = Color.Transparent,\n                                    selectedTextColor = Color.White,\n                                    selectedIconColor = Color.White,\n                                    selectedContainerColor = Palette_1_7\n                                )\n                            )\n                        }\n                    }\n                }\n            }\n\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/pizzeria/components/scaffold/ModalDrawerSheet.kt b/app/src/main/java/com/example/pizzeria/components/scaffold/ModalDrawerSheet.kt
--- a/app/src/main/java/com/example/pizzeria/components/scaffold/ModalDrawerSheet.kt	
+++ b/app/src/main/java/com/example/pizzeria/components/scaffold/ModalDrawerSheet.kt	
@@ -116,7 +116,7 @@
                                 unselectedContainerColor = Color.Transparent,
                                 selectedTextColor = Color.White,
                                 selectedIconColor = Color.White,
-                                selectedContainerColor = Palette_1_7
+                                selectedContainerColor = Palette_1_11
                             )
 
                         )
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"CompilerConfiguration\">\n    <bytecodeTargetLevel target=\"17\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="17" />
+    <bytecodeTargetLevel target="21" />
   </component>
 </project>
\ No newline at end of file
